# Пользователь вводит строку из четырёх
# или более целых чисел, разделённых символом “/”.
# Сформируйте словарь, где:
# ✔второе и третье число являются ключами.
# ✔первое число является значением для первого ключа.
# ✔четвертое и все возможные последующие числа хранятся в кортеже как значения второго ключа.
def task1(numbers_str: str) -> dict:
    v1, k1, k2, *v2 = map(int, numbers_str.split('/'))
    return {k1: v1, k2: tuple(v2)}


# ✔ Самостоятельно сохраните в переменной строку текста.
# ✔ Создайте из строки словарь, где ключ — буква, а значение — код буквы.
# ✔ Напишите преобразование в одну строку.
def task2(text: str) -> dict:
    return {ch: ord(ch) for ch in text}


# ✔ Продолжаем развивать задачу 2.
# ✔ Возьмите словарь, который вы получили.
# Сохраните его итераторатор.
# ✔ Далее выведите первые 5 пар ключ-значение, обращаясь к итератору, а не к словарю.
def task3(d: dict):
    it = iter(d.items())
    for _ in range(5):
        print(next(it))


# ✔ Создайте генератор чётных чисел от нуля до 100.
# ✔ Из последовательности исключите
# числа, сумма цифр которых равна 8.
# ✔ Решение в одну строку.
def task4():
    return (i for i in range(101) if sum(map(int, str(i))) != 8)


# ✔ Напишите программу, которая выводит на экран числа от 1 до 100.
# ✔ При этом вместо чисел, кратных трем, программа должна выводить слово «Fizz»
# ✔ Вместо чисел, кратных пяти — слово «Buzz».
# ✔ Если число кратно и 3, и 5, то программа должна выводить слово «FizzBuzz».
# ✔ *Превратите решение в генераторное выражение.
def task5():
    return ((i, 'Fizz', 'Buzz', 'FizzBuzz')[(not i % 3) + 2 * (not i % 5)] for i in range(1, 101))


# ✔ Выведите в консоль таблицу умножения от 2х2 до 9х10 как на школьной тетрадке.
# ✔ Таблицу создайте в виде однострочного генератора,
# где каждый элемент генератора — отдельный пример таблицы умножения.
# ✔ Для вывода результата используйте «принт» без перехода на новую строку.
def task6():
    [print(f"{k} X {v: <2}= {k * v}") for k, v in ((i, j) for i in range(2, 10) for j in range(2, 11))]


# ✔ Создайте функцию-генератор.
# ✔ Функция генерирует N простых чисел, начиная с числа 2.
# ✔ Для проверки числа на простоту используйте правило:
# «число является простым, если делится нацело только на единицу и на себя».
def is_prime(number: int) -> bool:
    for i in range(2, number // 2 + 1):
        if not number % i:
            return False
    return True


def task7(n: int, start: int = 2):
    while n:
        if is_prime(start):
            yield start
            n -= 1
        start += 1


def main():
    text = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
    print(task1(input() or "23/2/62/73/32/63"))
    dict_ = task2(text)
    print(dict_)
    task3(dict_)
    print(*task4())
    print(*task5())
    task6()
    for i in task7(10):
        print(f"{i} просто число")


if __name__ == '__main__':
    main()
